#version 430 // Version of OpenGL with COMPUTE shader support

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in; // Declares thread group size

uniform blurKernel {float weights[21]; }; // Declares a uniform block

layout (rgba32f) uniform readonly image2D src; // src image as 4 channel 32bit float readonly
layout (rgba32f) uniform writeonly image2D dst; // dst image as 4 channel 32bit float writeonly

// Variable shared with other threads in the 128x1 thread group
shared vec4 v[128+21];

uniform int width;

void main() {
	ivec2 gpos = ivec2(gl_GlobalInvocationID.xy);
	uint i = gl_LocalInvocationID.x; // Local thread id in the 128x1 thread groups128x1
	v[i] = imageLoad(src, gpos + ivec2(-width, 0)); // read an image pixel at an ivec2(.,.) position
	//v[i] = imageLoad(src, gpos); // read an image pixel at an ivec2(.,.) position
	if (i < 2*width) 
		v[i+128] = imageLoad(src, gpos+ivec2(128-width, 0)); 
	
	barrier(); // Wait for all threads to catchup before reading v[]
	
	vec4 sum = vec4(0.0f);
	for (int k = 0; k <= 2*width; k++) {
		sum += (v[i+k] * weights[k]);
	}

	imageStore(dst, gpos, sum); 
}